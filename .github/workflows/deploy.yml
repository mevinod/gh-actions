name: Infrastructure Deployment

on:
  push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (e.g., automation, sanity)'
        required: true
      region:
        description: 'Region (e.g., us-east-1, eu-west-1)'
        required: true

jobs:
  dynamic_job:
    runs-on: ubuntu-latest
    environment: jobvinod
    steps:
      - name: Print Job Name
        run: echo "This job is dynamically behaving as: ${{ env.JOB_NAME }}"
        env:
          JOB_NAME: jobvinod
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Git user
        run: |
          git config --global user.name "mevinod"
          git config --global user.email "connect@mevinod.com"
      - name: Get branch name
        id: get_branch
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Branch Name: $BRANCH_NAME"

      - name: Read base version
        id: base_version
        run: echo "BASE_VERSION=$(cat .version)" >> $GITHUB_ENV

      - name: Get latest build number
        id: get_latest_build
        run: |
          BRANCH_PREFIX=${{ env.BRANCH_NAME }}
          BASE_VERSION=${{ env.BASE_VERSION }}
          PREFIXED_VERSION="${BRANCH_PREFIX}-${BASE_VERSION}"

          LATEST_TAG=$(git tag -l "${PREFIXED_VERSION}.*" --sort=-v:refname | head -n 1)

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_BUILD=1
          else
            CURRENT_BUILD=$(echo "$LATEST_TAG" | awk -F'.' '{print $4}')
            NEW_BUILD=$((CURRENT_BUILD + 1))
          fi

          NEW_TAG="${PREFIXED_VERSION}.${NEW_BUILD}"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "New tag: $NEW_TAG"

      - name: Create and push tag
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: Set Deployment Path
        run: |
          DEPLOYMENT_PATH="deployments/${{ inputs.environment }}/${{ inputs.region }}"
          echo "DEPLOYMENT_PATH=$DEPLOYMENT_PATH" >> $GITHUB_ENV

      - name: Verify Deployment Path
        run: |
          if [ ! -d "$DEPLOYMENT_PATH" ]; then
            echo "Error: Deployment path $DEPLOYMENT_PATH does not exist!"
            exit 1
          fi
          echo "Deploying from $DEPLOYMENT_PATH"

      - name: Initialize Terraform
        run: |
          cd $DEPLOYMENT_PATH
          bash test.sh

#      - name: Apply Terraform
#        run: |
#          cd $DEPLOYMENT_PATH
#          terraform apply -auto-approve 
