name: Infrastructure Deployment

on:
  push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (e.g., automation, sanity)'
        required: true
      region:
        description: 'Region (e.g., us-east-1, eu-west-1)'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Git user
      
        run: |
          git config --global user.name "mevinod"
          git config --global user.email "connect@mevinod.com"
      - name: Determine Branch and Versioning
        id: versioning
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}  # Get current branch
          
          # Use only main branch's versioning when merged
          if [[ "$BRANCH_NAME" == "main" ]]; then
            TAG_PREFIX="vmain"
          else
            TAG_PREFIX="v$BRANCH_NAME"
          fi

          # Get the last version for the respective branch
          LAST_VERSION=$(git tag --list "$TAG_PREFIX-*" | sort -V | tail -n1 | sed "s/$TAG_PREFIX-//")

          if [ -z "$LAST_VERSION" ]; then
            NEW_VERSION="1.0.0"
          else
            IFS='.' read -r -a parts <<< "$LAST_VERSION"
            parts[2]=$((parts[2] + 1))  # Increment patch version
            NEW_VERSION="${parts[0]}.${parts[1]}.${parts[2]}"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "TAG_PREFIX=$TAG_PREFIX" >> $GITHUB_ENV

      - name: Commit and push new version
        run: |
          git tag -a "$TAG_PREFIX-$NEW_VERSION" -m "Release version $NEW_VERSION for $BRANCH_NAME"
          git push origin "$TAG_PREFIX-$NEW_VERSION"

      - name: Set Deployment Path
        run: |
          DEPLOYMENT_PATH="deployments/${{ inputs.environment }}/${{ inputs.region }}"
          echo "DEPLOYMENT_PATH=$DEPLOYMENT_PATH" >> $GITHUB_ENV

      - name: Verify Deployment Path
        run: |
          if [ ! -d "$DEPLOYMENT_PATH" ]; then
            echo "Error: Deployment path $DEPLOYMENT_PATH does not exist!"
            exit 1
          fi
          echo "Deploying from $DEPLOYMENT_PATH"

      - name: Initialize Terraform
        run: |
          cd $DEPLOYMENT_PATH
          bash test.sh

#      - name: Apply Terraform
#        run: |
#          cd $DEPLOYMENT_PATH
#          terraform apply -auto-approve
