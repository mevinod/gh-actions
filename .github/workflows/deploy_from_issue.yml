name: Deploy from Issue

on:
  issues:
    types: [labeled]

permissions:
  issues: read
  contents: read

jobs:
  deploy:
    if: contains(github.event.issue.labels.*.name, 'deployment')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Issue Inputs
        id: extract
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          REPO=${{ github.repository }}

          # Fetch issue details using GitHub API
          ISSUE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER")

          # Extract environment and region using jq
          ENVIRONMENT=$(echo "$ISSUE_DATA" | jq -r '.body' | awk -F "Environment" '{print $2}' | awk -F "Region" '{print $1}' | tr -d '\n' | xargs)
          REGION=$(echo "$ISSUE_DATA" | jq -r '.body' | awk -F "Region" '{print $2}' | tr -d '\n' | xargs)

          # Validate extracted values
          if [[ -z "$ENVIRONMENT" || -z "$REGION" ]]; then
            echo "❌ Error: Environment or Region is empty!"
            exit 1
          fi

          echo "Extracted Environment: $ENVIRONMENT"
          echo "Extracted Region: $REGION"

          # Save to GitHub environment variables
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV


      - name: Verify Deployment Path
        run: |
          DEPLOYMENT_PATH="deployment/$ENVIRONMENT/$REGION"
          if [ ! -d "$DEPLOYMENT_PATH" ]; then
            echo "❌ Error: Deployment path $DEPLOYMENT_PATH does not exist!"
            exit 1
          fi
          echo "✅ Deploying from $DEPLOYMENT_PATH"

      - name: Initialize Terraform
        run: |
          cd $DEPLOYMENT_PATH
          terraform init

      - name: Apply Terraform
        run: |
          cd $DEPLOYMENT_PATH
          terraform apply -auto-approve

      - name: Comment on Issue
        run: |
          COMMENT_BODY="✅ Deployment started for **$ENVIRONMENT/$REGION**"
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{\"body\": \"$COMMENT_BODY\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
